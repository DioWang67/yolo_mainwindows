# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Mainwindows.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt,QSize,QThread,pyqtSlot,QTimer,QMetaObject
from PyQt5.QtGui import QIcon, QPixmap,QFont, QMovie,QColor
import sys
from PyQt5.QtWidgets import QDialog, QVBoxLayout, QPushButton,QGroupBox, QFormLayout, QLineEdit,QLabel,QHBoxLayout,QTableWidget, QTableWidgetItem,QMessageBox,QSplitter,QGraphicsScene,QGraphicsPixmapItem
import json
from module.camera import CameraThread
from module.target import ImageSelectionWindow
from PyQt5.QtWidgets import QWidget,QApplication, QMainWindow, QPushButton
import os
import time
from datetime import datetime
import cv2
from module.image_similarity_checker import Image_similarity_checker
import re
from module.worker import Worker 

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        self.quantity, self.score = "", ""
        self.camera_status = False
        self.camera_thread = None
        self.save_after_open = False
        self.cameranum_count = 0
        self.worker_thread = None
        self.start_time = None

        self.MainWindow = MainWindow
        MainWindow.setObjectName("MainWindow")
        MainWindow.showMaximized()

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.centralwidget.setStyleSheet("background-color: rgb(240, 248, 255);")

        main_layout = QVBoxLayout(self.centralwidget)

        top_button_layout = QHBoxLayout()

        self.ControlFrame = QtWidgets.QFrame(self.centralwidget)
        self.ControlFrame.setStyleSheet("background-color: rgb(135, 206, 250); border-radius: 10px;")
        self.ControlFrame.setMaximumHeight(100)

        main_layout.insertWidget(0, self.ControlFrame)

        self.open_camera_Button = QtWidgets.QPushButton(self.ControlFrame)
        self.open_camera_Button.setObjectName("pushButton")

        self.close_camera_Button = QtWidgets.QPushButton(self.ControlFrame)
        self.close_camera_Button.setObjectName("pushButton")

        self.target_make_Button = QtWidgets.QPushButton(self.ControlFrame)
        self.target_make_Button.setObjectName("pushButton_2")

        self.img_check_Button_ = QtWidgets.QPushButton(self.centralwidget)
        self.img_check_Button_.setObjectName("img_check")
        self.img_check_Button_.setMinimumWidth(500)
        self.img_check_Button_.setMinimumHeight(100)
        self.img_check_Button_.setStyleSheet("""
        QPushButton {background-color: rgb(30, 144, 255);border-radius: 20px;}
        QPushButton:hover {background-color:rgb(137, 207, 240);}
        """)

        # 計時器標籤
        self.timer_label = QLabel(self.centralwidget)
        self.timer_label.setObjectName("timer_label")
        self.timer_label.setMinimumWidth(200)
        self.set_font(self.timer_label, 20)
        self.timer_label.setAlignment(Qt.AlignCenter)


        self.save_picture_Button = QtWidgets.QPushButton(self.ControlFrame)
        self.save_picture_Button.setObjectName("save_picture")

        self.setting_pushButton = QtWidgets.QPushButton(self.ControlFrame)
        self.setting_pushButton.setObjectName("setting")

        top_button_layout.addWidget(self.open_camera_Button)
        top_button_layout.addWidget(self.close_camera_Button)
        top_button_layout.addWidget(self.save_picture_Button)
        top_button_layout.addWidget(self.target_make_Button)
        top_button_layout.addWidget(self.setting_pushButton)





        layout_control = QVBoxLayout(self.ControlFrame)
        layout_control.addLayout(top_button_layout)

        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setStyleSheet("background-color:rgb(255, 255, 255);")


        self.graphicsView = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView.setObjectName("graphicsView")

        # self.graphicsView = QtWidgets.QLabel(self.centralwidget)
        # self.graphicsView.setGeometry(20, 20, 760, 560)

        splitter = QSplitter()
        splitter.addWidget(self.frame)
        splitter.addWidget(self.graphicsView)
        main_layout.addWidget(splitter)
        main_layout.setStretch(0, 1)
        main_layout.setStretch(1, 4)

        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")

        layout = QVBoxLayout(self.frame)

        def table_setting():
            table_container = QtWidgets.QWidget(self.frame)
            table_container.setObjectName("table_container")
            layout.addWidget(table_container)
            table_layout = QVBoxLayout(table_container)

            self.table_widget = QTableWidget()
            self.table_widget.setColumnCount(3)
            self.table_widget.setHorizontalHeaderLabels(['Item', 'Score', 'Result'])

            data = [("", "", "")]
            for row, item in enumerate(data):
                self.table_widget.insertRow(row)
                self.table_widget.setItem(row, 0, QTableWidgetItem(item[0]))
                self.table_widget.setItem(row, 1, QTableWidgetItem(item[1]))
                self.table_widget.setItem(row, 2, QTableWidgetItem(item[2]))

            table_layout.addWidget(self.table_widget)
            table_container.setLayout(table_layout)

        table_setting()

        self.label_3 = QtWidgets.QLabel(self.frame)
        self.label_3.setObjectName("label_3")

        self.label_4 = QtWidgets.QLabel(self.frame)
        self.label_4.setObjectName("label_4")


        layout.addWidget(self.label_3)
        layout.addWidget(self.label_4)

        bottom_layout = QVBoxLayout()
        bottom_layout.addStretch()
        img_check_button_layout = QHBoxLayout()
        img_check_button_layout.addStretch()
        img_check_button_layout.addWidget(self.img_check_Button_)
        img_check_button_layout.addWidget(self.timer_label)
        img_check_button_layout.addStretch()
        bottom_layout.addLayout(img_check_button_layout)

        main_layout.addLayout(bottom_layout)

        self.centralwidget.setLayout(main_layout)
        MainWindow.setCentralWidget(self.centralwidget)

        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)

        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.open_camera_Button.clicked.connect(lambda:self.open_camera(MainWindow))
        self.close_camera_Button.clicked.connect(lambda: self.close_camera(MainWindow))
        self.target_make_Button.clicked.connect(self.open_camera_capture_window)
        self.img_check_Button_.clicked.connect(self.open_camera_and_save_image)
        self.save_picture_Button.clicked.connect(self.save_image_button)
        self.setting_pushButton.clicked.connect(self.open_settings_window)

        self.set_button_icon(self.setting_pushButton, "setting-icon2.jpg")
        self.set_button_icon(self.open_camera_Button, "camera-icon.jpg")
        self.set_button_icon(self.close_camera_Button, "camera-icon.jpg")
        self.set_button_icon(self.save_picture_Button, "start-icon.jpg")
        self.set_button_icon(self.target_make_Button, "sample-icon.jpg")

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def set_font(self, object, size, bold=True, weight=75):
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(size)
        font.setBold(bold)
        font.setWeight(weight)
        object.setFont(font)

    def set_palette(self):
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 170))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 170))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)

        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)

        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)

        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)

        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)

        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)

        brush = QtGui.QBrush(QtGui.QColor(170, 170, 170))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)

        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)

        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)

        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)

        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)

        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)

        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)

        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)

        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)

        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)

        self.palette = palette
    def update_timer(self):
        if self.start_time:
            elapsed_time = datetime.now() - self.start_time
            self.timer_label.setText(str(elapsed_time).split('.')[0])  # 不顯示微秒

    def retranslateUi(self, MainWindow):
        self._translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(self._translate("MainWindow", "Talus AOI"))
        self.open_camera_Button.setText(self._translate("MainWindow", "開啟相機"))
        self.set_font(self.open_camera_Button, 12)

        self.close_camera_Button.setText(self._translate("MainWindow", "關閉相機"))
        self.set_font(self.close_camera_Button, 12)

        self.label_3.setText(self._translate("MainWindow", "Result"))
        self.label_3.setStyleSheet("color: black;")
        self.set_font(self.label_3, 25)

        self.label_4.setText(self._translate("MainWindow", self.score))
        self.label_4.setStyleSheet("color: black;")

        self.img_check_Button_.setText(self._translate("MainWindow", "Start"))
        self.set_font(self.img_check_Button_, 30)
        self.timer_label.setText(self._translate("MainWindow", "00:00:00"))
        # 設置計時器
        self.timer = QTimer()
        self.timer.timeout.connect(self.update_timer)
        self.timer.start(1000)  # 每秒更新一次
    def set_button_icon(self, button, icon_filename):
        # current_dir = os.path.dirname(os.path.realpath(__file__))
        icon_path = os.path.join( "icon", icon_filename)
        pixmap = QPixmap(icon_path)
        scaled_pixmap = pixmap.scaled(QSize(80, 80), QtCore.Qt.KeepAspectRatio)
        icon = QIcon(scaled_pixmap)
        button.setIcon(icon)
        button.setIconSize(scaled_pixmap.rect().size())

    def open_camera(self,MainWindow):
        if not self.camera_status:
            self.camera_thread = CameraThread(self)
            self.camera_thread.start()
            self.camera_status = True
            self.camera_status_delay()
    def camera_status_delay(self):
        QTimer.singleShot(3000, self.get_camera_status)
    def handle_camera_initialization(self,camera_open_status):
        if camera_open_status == False:
            self.camera_status = False
            QMessageBox.warning(self.MainWindow, 'Error', 'Error: 請檢查相機是否連接')


    def close_camera(self,MainWindow):
        try:
            if self.camera_status:
                self.camera_thread.stop_camera()
                self.camera_thread = None
                self.camera_status = False
        except Exception as e:
            QMessageBox.warning(self.MainWindow, 'Error', '請等待相機完全開啟。')

    def receive_saved_frame_path(self, path):
        print(f"Frame saved to: {path}")
        # 如果需要在保存圖片後自動進行檢測，可以在這裡調用 self.run_detection(path)
    def save_image_button(self):
        current_datetime = datetime.now().strftime("%Y%m%d%H%M%S")
        self.save_image(current_datetime)
    def save_image(self,current_datetime):
        if self.camera_status:
            self.camera_thread.save_current_frame(current_datetime)

        else:
            QMessageBox.warning(self.MainWindow, 'Error', '請檢查相機是否連接。')

    def run_detection(self, save_path, result_filename):
        self.selected_item = self.read_selected_item_from_config()
        target_json_path = os.path.join("target", "golden", f"{self.selected_item}-data",f"camera{self.cam_num[self.cam_index]}")
        image_path = save_path
        result_filename = result_filename
        self.checker = Image_similarity_checker()
        self.worker = Worker(self.checker, self.selected_item, target_json_path, image_path, result_filename)
        self.worker.finished.connect(self.workerFinished)
        self.worker.start()

    def workerFinished(self, data):
        print("Worker finished with data:", data)
        self.results.append(data)
        self.cam_index += 1
        self.close_camera(self.MainWindow)
        QTimer.singleShot(5000, self.start_next_camera)
        

    def open_camera_and_save_image(self):
        try:
            self.current_datetime = datetime.now().strftime("%Y%m%d%H%M%S")
            self.img_check_Button_.setEnabled(False)
            # if not self.start_time:
            self.start_time = datetime.now()
            self.timer_label.setText("00:00:00")
            self.timer.start(1000)
            self.selected_item = self.read_selected_item_from_config()
            self.target__path = os.path.join("target", "golden", f"{self.selected_item}-data")
            self.cam_num = self.find_camera_folders(self.target__path)
            print(self.cam_num)
            self.label_4.setText(self._translate("MainWindow", ""))
            self.label_4.setStyleSheet("color: white;")
            self.set_font(self.label_4, 50)
            self.table_widget.setRowCount(0)

            self.config_file = "config.json"
            self.cam_index = 0


            
            self.results = []

            self.start_next_camera()
        except Exception as e:
            # 捕捉其他類型的錯誤
            self.img_check_Button_.setEnabled(True)
            print("未知錯誤：", e)
    def start_next_camera(self):
        try:
            if self.cam_index < len(self.cam_num):
                with open(self.config_file, "r") as f:
                    config = json.load(f)
                config["main"]["cameranum"] = int(self.cam_num[self.cam_index])
                with open(self.config_file, "w") as f:
                    json.dump(config, f, indent=4)

                current_cam = self.cam_num[self.cam_index]
                print(f"Opening camera {current_cam}")
                self.open_camera(self.MainWindow)
                QTimer.singleShot(5000, self.take_photo_and_detect)
            else:
                print("All cameras processed.")
                print("Results:", self.results)
                merged_data = []
                for sublist in self.results:
                    merged_data.extend(sublist)
                    self.update_table(merged_data)
                    self.timer.stop()  # 停止計時
                    self.img_check_Button_.setEnabled(True)

        except Exception as e:
            # 捕捉其他類型的錯誤
            print("未知錯誤：", e)
    def take_photo_and_detect(self):
        self.save_image(self.current_datetime)
        QTimer.singleShot(2000, self.run_detection_with_current_image)

    def run_detection_with_current_image(self):
        self.get_path()
        # QMessageBox.warning(self.MainWindow, 'Error', '照片已儲存')
        self.run_detection(self.save_path, self.result_filename)

    @pyqtSlot(list)
    def operation_finished(self, data):
        self.update_table(data)

    def get_path(self):
        self.save_path, self.result_filename = self.camera_thread.get_paths_or_default()
        print(self.save_path, self.result_filename)

    def get_camera_status(self):
        self.camera_open_status = self.camera_thread.get_camera_status()
        self.handle_camera_initialization( self.camera_open_status)

    def find_camera_folders(self, target_directory):
        pattern = re.compile(r'camera(\d+)')
        folder_numbers = []
        for folder_name in os.listdir(target_directory):
            match = pattern.match(folder_name)
            if match:
                folder_numbers.append(int(match.group(1)))
        return folder_numbers

    def update_table(self, data):
        self.table_widget.setRowCount(0)
        font = QFont()
        font.setPointSize(12)  # 設置表格字體大小


        for row, item in enumerate(data):
            self.table_widget.insertRow(row)
            self.table_widget.setItem(row, 0, QTableWidgetItem(item[0]))
            self.table_widget.setItem(row, 1, QTableWidgetItem(item[1]))
            self.table_widget.setItem(row, 2, QTableWidgetItem(item[2]))
            # 檢查結果，如果是 "Fail"，設置紅色背景
            if item[2] == 'Fail':
                self.table_widget.item(row, 2).setBackground(QColor(255, 0, 0))
            elif item[2] == 'Pass':
                self.table_widget.item(row, 2).setBackground(QColor(0, 255, 0))          
            if any(result[2] == 'Fail' for result in data):
                self.label_4.setText(self._translate("MainWindow", "FAIL"))
                self.label_4.setStyleSheet("color: red;")
                self.set_font(self.label_4, 50)
            else:
                self.label_4.setText(self._translate("MainWindow", "PASS"))
                self.label_4.setStyleSheet("color: green;")
                self.set_font(self.label_4, 50)

                    # 設置字體大小
            self.table_widget.item(row, 0).setFont(font)
            self.table_widget.item(row, 1).setFont(font)
            self.table_widget.item(row, 2).setFont(font)

            self.table_widget.setRowHeight(row, 50)

                    # 設置表格列寬
        self.table_widget.setColumnWidth(0, 200)  # 第一列寬度
        self.table_widget.setColumnWidth(1, 200)  # 第二列寬度
        self.table_widget.setColumnWidth(2, 200)  # 第三列寬度
    def open_settings_window(self):
        self.settings_window = SettingsWindow()
        self.settings_window.show()

    def read_selected_item_from_config(self):
        config_file = "config.json"
        selected_item = None
        if not os.path.exists(config_file):
            print("config.json does not exist.")
            return None

        with open(config_file, "r") as f:
            config = json.load(f)
            selected_item = config.get("selected_item")
            save_pic_path = config.get("savepath")
            result_file = config.get("original_pic_folder")

        return selected_item
 
    def open_camera_capture_window(self):
        ###
        #開啟goden sample製作
        ###
        self.ImageSelectionWindow = ImageSelectionWindow()
        self.ImageSelectionWindow.show()

from PyQt5.QtWidgets import QMainWindow, QWidget, QVBoxLayout, QGroupBox, QHBoxLayout, QLineEdit, QPushButton, QComboBox, QLabel

from functools import partial

class SettingsWindow(QMainWindow):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Settings")
        self.setGeometry(100, 100, 300, 200)

        # 建立輸入框、新增按鈕和刪除按鈕
        self.input_box = QtWidgets.QLineEdit()
        self.add_button = QtWidgets.QPushButton("Add Model")
        self.add_button.clicked.connect(self.add_model)
        self.delete_button = QtWidgets.QPushButton("Delete Model")
        self.delete_button.clicked.connect(self.delete_model)
        self.save_button = QtWidgets.QPushButton("Save")
        self.save_button.clicked.connect(self.save_selection_to_json)
        # 建立下拉選單
        self.model_combo = QtWidgets.QComboBox()

        self.VideoCap_label = QtWidgets.QLabel()
        self.VideoCap_label.setText("選擇相機")
        self.VideoCap_label.setAlignment(Qt.AlignCenter)
        self.VideoCap_label.setStyleSheet("color: black;")
        self.set_font(self.VideoCap_label, 15)  
        self.VideoCap_comboBox = QtWidgets.QComboBox()

        # 檢查並建立 config.json 檔案
        self.config_file = "config.json"
        if not os.path.exists(self.config_file):
            config = {"models": [], "selected_item": []}
            with open(self.config_file, "w") as f:
                json.dump(config, f, indent=4)
        else:
            with open(self.config_file, "r") as f:
                config = json.load(f)

        # 將現有的模型名稱新增到下拉選單
        self.model_combo.addItems(config["models"])
        self.VideoCap_comboBox.addItems([str(num) for num in config["cameranum"]])
        # 建立版面配置
        layout = QtWidgets.QVBoxLayout()
        layout.addWidget(self.input_box)
        layout.addWidget(self.add_button)
        layout.addWidget(self.delete_button)
        layout.addWidget(self.save_button)
        layout.addWidget(self.model_combo)
        layout.addWidget(self.VideoCap_label)
        layout.addWidget(self.VideoCap_comboBox)

        # 創建一個 widget 並將佈局設置給它
        central_widget = QtWidgets.QWidget()
        central_widget.setLayout(layout)
        self.setCentralWidget(central_widget)
        # self.save_selection_to_json()


    def add_model(self):
        model_name = self.input_box.text().strip()
        if model_name:
            # 讀取現有的 config.json 檔案
            with open(self.config_file, "r") as f:
                config = json.load(f)

            # 新增模型名稱到 config.json 檔案中的 model 列表
            config["models"].append(model_name)

            # 儲存更新後的 config.json 檔案
            with open(self.config_file, "w") as f:
                json.dump(config, f, indent=4)

            # 將新增的模型名稱顯示在下拉選單中
            self.model_combo.addItem(model_name)
            self.input_box.clear()

    def delete_model(self):
        current_index = self.model_combo.currentIndex()
        if current_index != -1:
            model_name = self.model_combo.currentText()
            self.model_combo.removeItem(current_index)

            # 讀取現有的 config.json 檔案
            with open(self.config_file, "r") as f:
                config = json.load(f)

            # 從 config.json 檔案中的 model 列表中刪除指定模型名稱
            if model_name in config["models"]:
                config["models"].remove(model_name)

                # 儲存更新後的 config.json 檔案
                with open(self.config_file, "w") as f:
                    json.dump(config, f, indent=4)

    def save_selection_to_json(self):
        current_index = self.model_combo.currentIndex()
        selected_item = self.model_combo.currentText()
        VideoCap_selected_item = self.VideoCap_comboBox.currentText()

        if selected_item:
            # 讀取現有的 config.json 檔案
            with open(self.config_file, "r") as f:
                config = json.load(f)

            # 更新 selected_item
            config["selected_item"] = selected_item
            config["main"]["cameranum"] =int(VideoCap_selected_item)
            # 儲存更新後的 config.json 檔案
            with open(self.config_file, "w") as f:
                json.dump(config, f, indent=4)


    def set_font(self,object, size, bold=True, weight=75):
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(size)
        font.setBold(bold)
        font.setWeight(weight)
        object.setFont(font)


